#!/usr/bin/env python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import json
import sys
import agent
import os

# Try to parse the stdin as JSON.
# If parsing fails, output everything to stderr
data = json.load(sys.stdin)

# Generate Password

def generate_random_password(length):
    # Generate random bytes and convert them to a hexadecimal string
    random_bytes = os.urandom(length)
    password = random_bytes.hex()
    return password[:length]

#This is specific to you module, so you need to change it accordingly.

# configure postgres db variables
POSTGRES_USER="postgres"
POSTGRES_PASSWORD=generate_random_password(16)
POSTGRES_DB="metabase"
postgres_config = {
    "POSTGRES_USER": POSTGRES_USER,
    "POSTGRES_PASSWORD": POSTGRES_PASSWORD,
    "POSTGRES_DB": POSTGRES_DB
}
agent.write_envfile("database.env", postgres_config)

metabase_database = {
    'MB_DB_TYPE': 'postgres',
    'MB_DB_HOST': 'postgresql-app',
    'MB_DB_PORT': '5432',
    'MB_DB_USER': POSTGRES_USER,
    'MB_DB_PASS': POSTGRES_PASSWORD,
    'MB_DB_DBNAME': POSTGRES_DB
}
agent.write_envfile("metabase-database.env", metabase_database)
# Generate a 32-byte random binary string
random_bytes = os.urandom(24)

# Encode the binary string to a 32-character string using base64
MB_ENCRYPTION_SECRET_KEY = base64.urlsafe_b64encode(random_bytes).rstrip(b'=').decode('ascii')

agent.set_env('MB_ENCRYPTION_SECRET_KEY', MB_ENCRYPTION_SECRET_KEY)

# just before starting systemd unit
agent.dump_env()